generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model temp {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
}

model User {
  id                  Int                  @id @default(autoincrement())
  username            String               @unique
  email               String               @unique
  passwordHash        String
  createdAt           DateTime             @default(now())
  image               String?

  // Relations
  answers             Answer[]
  answerDownvotes     AnswerDownvote[]
  answerVotes         AnswerUpvote[]
  discussions         Discussion[]
  discussionDownvotes DiscussionDownvote[]
  discussionVotes     DiscussionUpvote[]
  questions           Question[]
  questionDownvotes   QuestionDownvote[]
  questionVotes       QuestionUpvote[]
  interests           UserInterest[]

  notifications       Notification[]       @relation("NotificationReceiver")
  notificationsSent   Notification[]       @relation("NotificationSender")
}


model Question {
  id          Int                @id @default(autoincrement())
  userId      Int
  title       String
  body        String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  answers     Answer[]
  discussions Discussion[]
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  downvotes   QuestionDownvote[]
  topics      QuestionTopic[]
  upvotes     QuestionUpvote[]

  @@index([userId])
  @@index([createdAt])
  @@index([body(ops: raw("gin_trgm_ops"))], map: "idx_question_body_trgm", type: Gin)
  @@index([title(ops: raw("gin_trgm_ops"))], map: "idx_question_title_trgm", type: Gin)
}

model Answer {
  id         Int              @id @default(autoincrement())
  questionId Int
  userId     Int
  body       String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  question   Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  downvotes  AnswerDownvote[]
  upvotes    AnswerUpvote[]

  @@index([questionId])
  @@index([userId])
  @@index([createdAt])
}

model Discussion {
  id         Int                  @id @default(autoincrement())
  questionId Int
  userId     Int
  content    String
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  question   Question             @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  downvotes  DiscussionDownvote[]
  upvotes    DiscussionUpvote[]

  @@index([questionId])
  @@index([userId])
  @@index([createdAt])
}

model Topic {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  image         String?         @default("")
  questionTags  QuestionTopic[]
  userInterests UserInterest[]
}

model QuestionTopic {
  questionId Int
  topicId    Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  topic      Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@id([questionId, topicId])
}

model UserInterest {
  userId  Int
  topicId Int
  topic   Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, topicId])
}

model QuestionUpvote {
  userId     Int
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, questionId])
}

model QuestionDownvote {
  userId     Int
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, questionId])
}

model AnswerUpvote {
  userId   Int
  answerId Int
  answer   Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, answerId])
}

model AnswerDownvote {
  userId   Int
  answerId Int
  answer   Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, answerId])
}

model DiscussionUpvote {
  userId       Int
  discussionId Int
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, discussionId])
}

model DiscussionDownvote {
  userId       Int
  discussionId Int
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, discussionId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  actorId   Int
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  actor_username  String
  actor_image   String

  user      User     @relation("NotificationReceiver", fields: [userId], references: [id], onDelete: Cascade)
  actor     User     @relation("NotificationSender", fields: [actorId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([actorId])
  @@index([read])
}



model alive {
  id        BigInt   @id @default(autoincrement())
  timestamp DateTime @default(now()) @db.Timestamptz(6)
}
