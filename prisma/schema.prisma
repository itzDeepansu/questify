generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model temp {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
}


model User {
  id               Int                  @id @default(autoincrement())
  username         String               @unique
  email            String               @unique
  passwordHash     String
  createdAt        DateTime             @default(now())
  questions        Question[]
  answers          Answer[]
  discussions      Discussion[]
  questionVotes    QuestionUpvote[]
  answerVotes      AnswerUpvote[]
  discussionVotes  DiscussionUpvote[]
  interests        UserInterest[]
  notifications    Notification[]
}

model Question {
  id          Int             @id @default(autoincrement())
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  title       String
  body        String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  answers     Answer[]
  discussions Discussion[]
  topics      QuestionTopic[]
  upvotes     QuestionUpvote[]

  @@index([userId])
  @@index([createdAt])
}

model Answer {
  id         Int            @id @default(autoincrement())
  question   Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  body       String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  upvotes    AnswerUpvote[]

  @@index([questionId])
  @@index([userId])
  @@index([createdAt])
}

model Discussion {
  id          Int               @id @default(autoincrement())
  question    Question          @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  Int
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  content     String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  upvotes     DiscussionUpvote[]

  @@index([questionId])
  @@index([userId])
  @@index([createdAt])
}

model Topic {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  questionTags   QuestionTopic[]
  userInterests  UserInterest[]
}

model QuestionTopic {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  topic      Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId    Int

  @@id([questionId, topicId])
}

model UserInterest {
  user     User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  topic    Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId  Int

  @@id([userId, topicId])
}

model QuestionUpvote {
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  Int

  @@id([userId, questionId])
}

model AnswerUpvote {
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  answer    Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId  Int

  @@id([userId, answerId])
}

model DiscussionUpvote {
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  discussion    Discussion  @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  discussionId  Int

  @@id([userId, discussionId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([read])
}

